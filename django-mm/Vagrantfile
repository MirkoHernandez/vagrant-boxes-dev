# -*- mode: ruby -*-
# vi: set ft=ruby :

#

require 'yaml'

# Load  conf.yml.
config_data = begin
  puts "conf.yml parsing ..."
  YAML.load_file('conf.yml')
  rescue
    STDERR.puts "conf.yml could not be loaded."
    exit
end

# Verify conf_data values
puts config_data.inspect

# Vagrantfile 
Vagrant.configure("2") do |config|
  # Box
  config.vm.box = config_data["vagrant_box"]

  config.vm.define "django" do |django|
    # Network
    django.vm.network "private_network", ip: config_data["ip_address"]
    django.vm.network  "forwarded_port", guest: 8000, host: 8000

    # Shared folders
    django.vm.synced_folder '.', '/vagrant', disabled: true
    django.vm.synced_folder "projects", "/home/vagrant/projects"
  
    # Provisioning
    if config_data["localtime"]
      django.vm.provision "shell", inline:  "sudo rm /etc/localtime && sudo ln -s " + config_data["localtime"]  + " /etc/localtime"
    end
  
    django.vm.provision "shell", path: "provisioning/django/provision-linux.sh" , privileged: false
    django.vm.provision "shell", path: "provisioning/django/provision-python.sh", privileged: false, args: config_data["python_version"].to_s
    django.vm.provision "shell", path: "provisioning/django/provision-django.sh", privileged: false,
                        args: [config_data["python_version"].to_s,
                               config_data["django_version"].to_s,
                               config_data["project_name"],
                               config_data["database_name"].to_s,
                               config_data["database_user"].to_s,
                               config_data["database_password"].to_s,
                               config_data["ip_address_database"].to_s,
                               config_data["database_port"].to_s, 
                              ]
  end

  config.vm.define "postgres" do |postgres|
      # Network
    postgres.vm.network "private_network", ip: config_data["ip_address_database"]

    # Provisioning
    postgres.vm.provision "shell", path: "provisioning/postgres/provision-linux.sh" , privileged: false, args: config_data["postgres_version"].to_s
    postgres.vm.provision "shell", path: "provisioning/postgres/provision-postgres.sh", args: config_data["postgres_version"].to_s + " " + config_data["database_user"].to_s + " " +  config_data["database_password"].to_s + " " +  config_data["database_name"].to_s
  end
end
